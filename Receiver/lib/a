function cfg()
	local cfgExists = fs.exists("cfg/config")

	if cfgExists == false then 
		term.clear()
		term.setCursorPos(1, 1)
		print("Creating config...")
		print(" ")
		function modemlocation()
			print("On what side is modem?")
			print("(left/right/top/bottom/front/back)")
			modemLocation = read()
				if modemLocation == "left" or
					modemLocation == "right" or
					modemLocation == "top" or
					modemLocation == "bottom" or
					modemLocation == "front" or
					modemLocation == "back" 
				then
					local maxwrite = fs.open("cfg/modem", "w")
		  			maxwrite.writeLine(string.format("%s", modemLocation))
		  			maxwrite.close()
				else
					term.setTextColor(colors.red)
					print("ERROR - wrong answer")
					term.setTextColor(colors.white)
					print(" ")
					modemlocation()
				end
		end
		modemlocation()

		function test()
			if monitorLocation == modemLocation then
				term.setTextColor(colors.red)
				print("ERROR - the monitor cant be on same side like modem...")
				term.setTextColor(colors.white)
				print(" ")
				monitorlocation()
			end
		end

		term.clear()
		term.setCursorPos(1, 1)
		print("Creating config...")
		print(" ")
		function monitorlocation()
			print("On what side is monitor?")
			print("(left/right/top/bottom/front/back)")
			monitorLocation = read()
				if monitorLocation == "left" or
					monitorLocation == "right" or
					monitorLocation == "top" or
					monitorLocation == "bottom" or
					monitorLocation == "front" or
					monitorLocation == "back" 
				then
					test()
					local maxwrite = fs.open("cfg/monitor", "w")
		  			maxwrite.writeLine(string.format("%s", monitorLocation))
		  			maxwrite.close()
				else
					term.setTextColor(colors.red)
					print("ERROR - wrong answer")
					term.setTextColor(colors.white)
					print(" ")
					monitorlocation()
				end
		end
		monitorlocation()

		term.clear()
		term.setCursorPos(1, 1)
		print("Creating config...")
		print(" ")
		function channelformax()
			print("Channel for Max?")
			print("(number from 1 to 55555)")
			channelForMax = tonumber(read())
				if channelForMax < 1 or channelForMax > 55555 then
					term.setTextColor(colors.red)
					print("ERROR - wrong answer")
					term.setTextColor(colors.white)
					print(" ")
					channelformax()
				else
		  			local maxwrite = fs.open("cfg/Max", "w")
		  			maxwrite.writeLine(string.format("%s", channelForMax))
		  			maxwrite.close()
				end		
		end
		channelformax()

		function test2()
			if channelForStored == channelForMax then
				term.setTextColor(colors.red)
				print("ERROR - channel for stored cant be the same as channel for max...")
				term.setTextColor(colors.white)
				print(" ")
				channelforstored()
			end
		end

		term.clear()
		term.setCursorPos(1, 1)
		print("Creating config...")
		print(" ")
		function channelforstored()
			print("Channel for Stored?")
			print("(number from 1 to 55555)")
			channelForStored = tonumber(read())
				if channelForStored < 1 or channelForStored > 55555 then
					term.setTextColor(colors.red)
					print("ERROR - wrong answer")
					term.setTextColor(colors.white)
					print(" ")
					channelforstored()
				else
					test2()
		  			local maxwrite = fs.open("cfg/Stored", "w")
		  			maxwrite.writeLine(string.format("%s", channelForStored))
		  			maxwrite.close()
				end		
		end
		channelforstored()

		term.clear()
		term.setCursorPos(1, 1)
		print("Creating config...")
		print(" ")
		function eushowing()
			print("Do you want to display EU Max and Stored?")
			print("T for true / F for false")
			local EUShowing = read()
				if EUShowing == "T" or
					EUShowing == "F" 
				then
					local maxwrite = fs.open("cfg/EU", "w")
		  			maxwrite.writeLine(string.format("%s", EUShowing))
		  			maxwrite.close()
		  		else
					term.setTextColor(colors.red)
					print("ERROR - wrong answer")
					term.setTextColor(colors.white)
					print(" ")
					eushowing()
				end
		end
		eushowing()

		local maxwrite = fs.open("cfg/config", "w")
		maxwrite.close()
	else
	end
end